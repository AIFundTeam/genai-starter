#!/bin/bash

# Environment Setup Script
# This script loads configuration from env.config
# Copy this to setup-env.sh (no need to edit this file)

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check if env.config exists
if [ ! -f "env.config" ]; then
    echo -e "${RED}Error: env.config not found!${NC}"
    echo -e "${YELLOW}Please copy env.config.template to env.config and fill in your values:${NC}"
    echo "  cp env.config.template env.config"
    echo "  # Edit env.config with your credentials"
    return 1 2>/dev/null || exit 1
fi

# Source the configuration
source env.config

# Derive SUPABASE_URL from PROJECT_REF
export SUPABASE_URL="https://${SUPABASE_PROJECT_REF}.supabase.co"

# Auto-fetch Cloudflare Account ID from API token
if [ -n "$CLOUDFLARE_API_TOKEN" ]; then
    if command -v curl &> /dev/null; then
        API_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/json" 2>/dev/null)
        
        if echo "$API_RESPONSE" | grep -q '"success":true'; then
            CLOUDFLARE_ACCOUNT_ID=$(echo "$API_RESPONSE" | python3 -c "import json, sys; data=json.load(sys.stdin); print(data['result'][0]['id'])" 2>/dev/null)
            
            if [ -n "$CLOUDFLARE_ACCOUNT_ID" ]; then
                export CLOUDFLARE_ACCOUNT_ID
            else
                echo -e "${RED}❌ Failed to parse Account ID from API response${NC}"
                return 1 2>/dev/null || exit 1
            fi
        else
            echo -e "${RED}❌ API call failed. Please check your CLOUDFLARE_API_TOKEN${NC}"
            return 1 2>/dev/null || exit 1
        fi
    else
        echo -e "${RED}❌ curl not available for API call${NC}"
        return 1 2>/dev/null || exit 1
    fi
fi

# Export all variables for use by other scripts
export PROJECT_NAME
export SUPABASE_PROJECT_REF
export SUPABASE_URL
export SUPABASE_ANON_KEY
export SUPABASE_SERVICE_ROLE_KEY
export SUPABASE_DB_PASSWORD
export SUPABASE_ACCESS_TOKEN
export CLOUDFLARE_ACCOUNT_ID
export OPENAI_API_KEY

# Validation
REQUIRED_VARS=(
    "PROJECT_NAME"
    "SUPABASE_URL"
    "SUPABASE_ANON_KEY"
    "SUPABASE_PROJECT_REF"
    "SUPABASE_DB_PASSWORD"
    "SUPABASE_SERVICE_ROLE_KEY"
    "SUPABASE_ACCESS_TOKEN"
    "CLOUDFLARE_API_TOKEN"
    "CLOUDFLARE_ACCOUNT_ID"
    "OPENAI_API_KEY"
)

ALL_SET=true
MISSING_VARS=()
for var in "${REQUIRED_VARS[@]}"; do
    eval "value=\$$var"
    if [ -z "$value" ] || [[ "$value" == *"your-"*"here"* ]]; then
        MISSING_VARS+=("$var")
        ALL_SET=false
    fi
done

if [ "$ALL_SET" = false ]; then
    echo -e "${RED}Error: Missing or unconfigured environment variables:${NC}"
    for var in "${MISSING_VARS[@]}"; do
        echo "  - $var"
    done
    echo -e "\n${YELLOW}Please edit env.config and set all required values${NC}"
    return 1 2>/dev/null || exit 1
fi

if [ "$ALL_SET" = true ]; then
    
    # Generate env.js for frontend
    cat > frontend/env.js <<EOF
// Environment configuration
// Auto-generated by setup-env.sh - DO NOT EDIT
window.SUPABASE_URL = '${SUPABASE_URL}';
window.SUPABASE_ANON_KEY = '${SUPABASE_ANON_KEY}';
EOF
    
    # Generate .mcp.json for MCP servers
    SHOULD_REGENERATE=false

    # Check if .mcp.json needs to be regenerated
    if [ ! -f ".mcp.json" ]; then
        SHOULD_REGENERATE=true
    elif [ -f ".mcp.json" ]; then
        # Check if project-ref or access token has changed
        CURRENT_PROJECT_REF=$(grep -o "project-ref=[^\"]*" .mcp.json | cut -d= -f2 || echo "")
        CURRENT_ACCESS_TOKEN=$(grep -A 1 "SUPABASE_ACCESS_TOKEN" .mcp.json | tail -1 | grep -o '".*"' | tr -d '"' || echo "")

        if [ "$CURRENT_PROJECT_REF" != "$SUPABASE_PROJECT_REF" ] || [ "$CURRENT_ACCESS_TOKEN" != "$SUPABASE_ACCESS_TOKEN" ]; then
            SHOULD_REGENERATE=true
        fi
    fi

    if [ "$SHOULD_REGENERATE" = true ]; then
        # Detect OS and set appropriate command
        MCP_COMMAND="npx"
        if [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "win32" ]] || [[ "$OSTYPE" == "cygwin" ]]; then
            MCP_COMMAND="npx.cmd"
        fi

        # Copy template and substitute variables
        cp .mcp.json.template .mcp.json

        # Use sed to replace placeholders
        if [[ "$OSTYPE" == "darwin"* ]]; then
            # macOS requires -i '' for in-place editing
            sed -i '' "s|\${MCP_COMMAND}|${MCP_COMMAND}|g" .mcp.json
            sed -i '' "s|\${SUPABASE_PROJECT_REF}|${SUPABASE_PROJECT_REF}|g" .mcp.json
            sed -i '' "s|\${SUPABASE_ACCESS_TOKEN}|${SUPABASE_ACCESS_TOKEN}|g" .mcp.json
        else
            # Linux and Git Bash
            sed -i "s|\${MCP_COMMAND}|${MCP_COMMAND}|g" .mcp.json
            sed -i "s|\${SUPABASE_PROJECT_REF}|${SUPABASE_PROJECT_REF}|g" .mcp.json
            sed -i "s|\${SUPABASE_ACCESS_TOKEN}|${SUPABASE_ACCESS_TOKEN}|g" .mcp.json
        fi
    fi
    
    # Link Supabase project
    if command -v supabase &> /dev/null; then
        if [ ! -f "supabase/.temp/project-ref" ] || [ "$(cat supabase/.temp/project-ref 2>/dev/null)" != "$SUPABASE_PROJECT_REF" ]; then
            supabase link --project-ref "$SUPABASE_PROJECT_REF" --password "$SUPABASE_DB_PASSWORD" 2>&1 | grep -v "WARNING: Local config differs" || true
        fi
    fi
    
fi