#!/bin/bash

# Frontend deployment script for Cloudflare Pages

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

FRONTEND_DIR="frontend"

echo -e "${YELLOW}=== Cloudflare Pages Deployment ===${NC}"
echo ""

# Auto-source setup-env.sh if env.config exists and environment variables are not set
if [ -z "$CLOUDFLARE_PROJECT_NAME" ] || [ -z "$SUPABASE_URL" ] || [ -z "$SUPABASE_ANON_KEY" ]; then
    if [ -f "env.config" ]; then
        echo -e "${YELLOW}Environment variables not set. Auto-sourcing setup-env.sh...${NC}"
        source setup-env.sh
        if [ -z "$CLOUDFLARE_PROJECT_NAME" ] || [ -z "$SUPABASE_URL" ] || [ -z "$SUPABASE_ANON_KEY" ]; then
            echo -e "${RED}Error: Failed to load environment variables!${NC}"
            echo "Please check your env.config file"
            exit 1
        fi
    else
        echo -e "${RED}Error: Environment variables not set and env.config not found!${NC}"
        echo "Please create env.config from env.config.template and fill in your values"
        exit 1
    fi
fi

echo -e "${GREEN}Deploying to Cloudflare Pages project: ${CLOUDFLARE_PROJECT_NAME}${NC}"
echo -e "${GREEN}Project: ${CLOUDFLARE_PROJECT_NAME}${NC}"
echo ""

# Check if wrangler is installed
if ! command -v wrangler &> /dev/null; then
    echo -e "${YELLOW}Wrangler not found. Installing...${NC}"
    npm install -g wrangler
fi

# Check that env.js exists (generated by setup-env.sh)
if [ ! -f "frontend/env.js" ]; then
    echo -e "${RED}Error: frontend/env.js not found!${NC}"
    echo "Please run: source setup-env.sh"
    exit 1
fi

echo -e "${GREEN}✓ Using env.js from setup-env.sh${NC}"
echo ""

# Check if project exists, create if it doesn't
echo -e "${GREEN}Checking if project exists...${NC}"
PROJECT_CHECK=$(wrangler pages project list 2>&1 | grep -w "$CLOUDFLARE_PROJECT_NAME" || true)

if [ -z "$PROJECT_CHECK" ]; then
    echo -e "${YELLOW}Project '$CLOUDFLARE_PROJECT_NAME' not found. Creating...${NC}"
    wrangler pages project create "$CLOUDFLARE_PROJECT_NAME" --production-branch=main
    if [ $? -ne 0 ]; then
        echo -e "${RED}Error: Failed to create Cloudflare Pages project.${NC}"
        exit 1
    fi
    echo -e "${GREEN}✓ Project created successfully${NC}"
else
    echo -e "${GREEN}✓ Project already exists${NC}"
fi

# Deploy the frontend and capture output
echo -e "${GREEN}Deploying to Cloudflare Pages...${NC}"
DEPLOY_OUTPUT=$(wrangler pages deploy "$FRONTEND_DIR" --project-name="$CLOUDFLARE_PROJECT_NAME" 2>&1)

DEPLOY_STATUS=$?
if [ $DEPLOY_STATUS -ne 0 ]; then
    echo -e "${RED}Error: Failed to deploy to Cloudflare Pages.${NC}"
    echo "$DEPLOY_OUTPUT"
    exit $DEPLOY_STATUS
fi

# Display deployment output
echo "$DEPLOY_OUTPUT"

# Extract the project's stable domain
# The deployment URL contains a hash prefix, but the stable domain is project-name + random suffix
# Extract from deployment URL pattern: https://[hash].[project-name]-[suffix].pages.dev
DEPLOYMENT_URL=$(echo "$DEPLOY_OUTPUT" | grep -oE "https://[a-f0-9]+\.[a-zA-Z0-9-]+\.pages\.dev" | tail -1)
if [ -n "$DEPLOYMENT_URL" ]; then
    # Extract the stable domain part (everything after the first dot)
    STABLE_DOMAIN=$(echo "$DEPLOYMENT_URL" | sed 's|https://[^.]*\.||')
fi

echo -e ""
echo -e "${GREEN}=== Frontend Deployment Complete ===${NC}"

if [ -n "$STABLE_DOMAIN" ]; then
    echo -e "${GREEN}Your app is deployed at:${NC}"
    echo -e "${YELLOW}Stable domain: https://${STABLE_DOMAIN}${NC}"
    if [ -n "$DEPLOYMENT_URL" ]; then
        echo -e "${YELLOW}This deployment: ${DEPLOYMENT_URL}${NC}"
    fi
else
    echo -e "${GREEN}Check the deployment URL above ↑${NC}"
fi

echo ""
echo -e "${GREEN}Next steps:${NC}"
echo "See README.md section 7 for testing instructions"